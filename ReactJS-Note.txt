ReactJS
	- JavaScript library to build user interfaces.
	- Surprisingle, we can make components and use them dynamically for whatever we want to make.

	- we can break down a very complex structure into a component tree.
	- Example (all of these are components):
		- App
			- NavBar
			- ToDoList
				- ListItem
					- CheckBox
					- ItemText

	- <MyHeader/>
	- <PageContent/>
	- <MyFooter/>

	- each component has its own ( html, css and js ) files in the small chunks, we can have it as many as we want it to be.
	- each time it refreshes the component, whenever it updates.

import React from "react";
import ReactDOM from "react-dom";

ReactDOM.render
	- What to show and where to show it. (IMPORTANT)
	- it is responsible for how the UI will look like
		- Output of this render method is simple, plain JS object
		- react keeps a light weight representation of the DOM, that is refered as DOM.
		- whenever we change the state of a component we get a new react element
		- react will then compare this element and its children with the previous one.
		- its figures out what is being changed and then it will update the part of the real dom and keep everything in a sync. 
	- all of this happens with the help of JSX.

	- rendor method can only take one html element, cannot render multiple html tags.

JSX
	- in jsx we should be following the "camelCase" naming convention.
	- for applying the css we have to use the javascript objects.
		- example
			- const = customeStyle = {
				color: "red",
				fontSize: "20px",
				border: "1px solid black"
			}
			customeSytle.color = "blue";

	- it is the core component of react
	- JSx stands for JavaScript XML, that allow us the write the HTML code in react.
		- React will internally convert this into a virtual DOM, and will ultimately output out HTML for us.

	- ReactJs is a JS front-end Library, that uses the Virtual DOM.
	- React application is made up of multiple components, each for outputting small, reusable piece of HTML

Babel
	- is a JS compiler, that converts it into the browser compatible JS

Components
	- converting large JS files into small manageable components is what this means.
	- remember
		- whenever we are exporting the single-export, we can have it with any name we want to.
		- but if there are multiple export module from the single file then the name must be same with the original exports.
			- i.e; (more preferable method of importing the modules)
				- default export {doublePi, tripplePi};
				- then in the main file, we have to import it in like:
					- import PI, {doublePi, tripplePi} from "./math.js";
		- or we can use the * as well to import everything from that component.
			- import * as pi from "./math.js"
			- {pi.doublePi};
			- {pi.tripplePi};